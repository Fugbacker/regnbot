require('dotenv').config()
const apiToken = process.env.API_KEY
module.exports = {
    startText: function startText() {
        return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –î–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ <b>–Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç</b>`
      },
    answerInformationEgrn: function answerInformationEgrn(objectData) {
        // todo : –¥–µ—Å—Ç—Ä—É–∫—É—Ä–∏–∑–∞—Ü–∏—è 58 - 61—Å—Ç—Ä
        let kadnum = objectData.response.objectCn
        let parcelStatus = objectData.response.parcelStatus
        let objectName = objectData.response.objectName
        let addressNote = objectData.response.addressNote
        let areaType = `${objectData.response.areaValue}${objectData.response.areaUnit}`
        let cadCost = `${objectData.response.cadCost}${objectData.response.cadUnit}`
        function checkAdress() {
          if (typeof addressNote === 'undefined') {
            return '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
          } else {
            return addressNote
          }
        }
        let adress = checkAdress()
        let res = [
          `<b>–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä</b>: ${kadnum}`,
          `<b>–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:</b> ${adress}`,
          `<b>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:</b> ${objectName}`,
          `<b>${objectData.response.areaType}:</b> ${areaType}`,
          `<b>–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${cadCost}`
        ]
      
        return res.join('\n')
      },
      getApiUrl: (cn) => `https://regrn.su/api/request?req=right&cn=${cn}&version=2.0&format=json&api-key=${apiToken}`,
      getScrapUrl: (cn) => `https://regrn.su/api/request?req=specification&cn=${cn}&version=2.0&format=json&api-key=${apiToken}`,
      getEgrpMessage: (data, dataMessage) => {
        function searchOwners() {
          let numberOfOwners = JSON.stringify(data.response.right)
          if (numberOfOwners.match(/"rightdata":"not found"/g) === null) {
            return Object.keys(data.response.right).length
          }
          else {
            return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
          }
      
        }
        let owners = searchOwners()
        // let firstOwner = data.response.right['0'].rightdata
        function restrictionResult() {
          let restriction = JSON.stringify(data.response.right).match(/"encumbrances":"not found"/g)
          if (restriction === null) {
            return '‚Äº –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –æ–±—ä–µ–∫—Ç –Ω–∞–ª–æ–∂–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'
          }
          else {
            return '‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
      
        }
        let resultRestriction = restrictionResult()
        let result = [
          dataMessage,
          `<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤:</b> ${owners}`,
          resultRestriction
        ]
        return result.join('\n')
      },
      OPERATIONS_ACTIONS: {
        "/start": (msg) => {
          const chatId = msg.chat.id;
          const htmlText = `–î–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
          –ù–∞–ø—Ä–∏–º–µ—Ä: <b>77:01:0001011:1002</b>
          –∏–ª–∏
          <b>–ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è, –ø–ª. –ö—Ä–∞—Å–Ω–∞—è, –¥.5</b>`;
          bot.sendMessage(chatId, htmlText, {
            parse_mode: 'HTML',
            reply_markup: {
              keyboard: [
                [`üìù ${OPERATIONS.REPORT_TYPES}`, `üìÑ ${OPERATIONS.SERVICE_DESCRIPTOINS}`],
                [`üîç ${OPERATIONS.FIND_OBJECT}`]
              ]
            }
          })
          return true
        }
      }
}